{"version":3,"sources":["App.js","Mix.jsx","serviceWorker.js","index.js"],"names":["App","props","calculateTimeLeft","Date","getFullYear","difference","year","timeLeft","Days","Math","floor","Hours","Minutes","Seconds","useState","setTimeLeft","useEffect","setTimeout","timerComponents","Object","keys","forEach","interval","idx","push","class","name","Jumbotron","className","Container","fluid","Row","Col","length","Mix","handleChange","value","textInput","current","console","log","state","inputValue","evt","this","setState","target","onChange","updateInputValue","updateYear","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kSA+DeA,MArDf,SAAaC,GACX,IAAMC,EAAoB,YACb,IAAIC,MAAOC,cAAtB,IACMC,GAAc,IAAIF,KAAJ,UAAYF,EAAMK,QAAW,IAAIH,KACjDI,EAAW,GAWf,OATIF,EAAa,IACfE,EAAW,CACPC,KAAK,CAAEC,KAAKC,MAAML,EAAU,OAA0B,OACtDM,MAAO,CAACF,KAAKC,MAAOL,EAAU,KAAuB,IAAI,OACzDO,QAAS,CAACH,KAAKC,MAAOL,EAAa,IAAO,GAAM,IAAI,OACtDQ,QAASJ,KAAKC,MAAOL,EAAa,IAAQ,MAIvCE,GAfS,EAkBcO,mBAASZ,KAlBvB,mBAkBXK,EAlBW,KAkBDQ,EAlBC,OAmBHD,oBAAS,IAAIX,MAAOC,eAnBjB,oBAqBlBY,qBAAU,WACRC,YAAW,WACTF,EAAYb,OACX,QAGL,IAAMgB,EAAkB,GAWxB,OAVAC,OAAOC,KAAKb,GAAUc,SAAQ,SAASC,EAASC,GAI9CL,EAAgBM,KACZ,oCACKjB,EAASe,QAKlB,6BACI,gCAAQ,wBAAIG,MAAQ,eAAZ,kCAAsD,0BAAMA,MAAO,cAAb,IAA4BxB,EAAMyB,QACpG,kBAACC,EAAA,EAAD,CAAWC,UAAW,QAClB,kBAACC,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACA,gCAAQ,wBAAIP,MAAO,YAAaP,EAAgBe,OAASf,EAAgB,oD,gCCL1EgB,G,8DAvCX,WAAYjC,GAAQ,IAAD,8BACnB,cAAMA,IAQNkC,aAAe,WAEd,EAAKC,MAAS,EAAKC,UAAUC,QAAQF,MAClCG,QAAQC,IAAI,EAAKJ,QAVjB,EAAKK,MAAQ,CACTC,WAAa,UACbpC,KAAK,cAJM,E,6DAcDqC,GAClBC,KAAKC,SAAS,CACdH,WAAYC,EAAIG,OAAOV,U,iCAGXO,GACZC,KAAKC,SAAS,CACdvC,KAAMqC,EAAIG,OAAOV,U,+BAIR,IAAD,OACJ,OACI,oCACI,kBAAC,EAAD,CAAKV,KAAQkB,KAAKH,MAAMC,WAAYpC,KAAQsC,KAAKH,MAAMnC,OACvD,8DACA,gCAAQ,2BAAO8B,MAAOQ,KAAKH,MAAMC,WAAYK,SAAU,SAAAJ,GAAG,OAAI,EAAKK,iBAAiBL,OACpF,+DACA,6BACA,oDACA,gCAAQ,2BAAOP,MAAOQ,KAAKH,MAAMnC,KAAMyC,SAAU,SAAAJ,GAAG,OAAI,EAAKM,WAAWN,Y,GAnCtEO,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCPNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC7B,EAAA,EAAD,CAAWC,OAAK,GACZ,kBAACC,EAAA,EAAD,MAGA,kBAACA,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACJ,kBAAC,EAAD,UAMR2B,SAASC,eAAe,SD0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.0ab10013.chunk.js","sourcesContent":["import React, {Component, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Alert from 'react-bootstrap/Alert'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport Container from 'react-bootstrap/Container'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Button from 'react-bootstrap/Button'\n\nfunction App(props) {\n  const calculateTimeLeft = () => {\n    let year = new Date().getFullYear();\n    const difference = +new Date(`${props.year}`) - +new Date(); // year month day\n    let timeLeft = {};\n\n    if (difference > 0) {\n      timeLeft = {\n          Days:[ Math.floor(difference / (1000 * 60 * 60 * 24)),\" : \"],\n          Hours: [Math.floor((difference / (1000 * 60 * 60)) % 24),\" : \"],\n          Minutes: [Math.floor((difference / 1000 / 60) % 60),\" : \"],\n        Seconds: Math.floor((difference / 1000) % 60),\n      };\n    }\n\n    return timeLeft;\n  };\n\n  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n  const [year] = useState(new Date().getFullYear());\n\n  useEffect(() => {\n    setTimeout(() => {\n      setTimeLeft(calculateTimeLeft());\n    }, 1000);\n  });\n\n  const timerComponents = [];\n  Object.keys(timeLeft).forEach(function(interval,idx) {\n    /*if (!timeLeft[interval]) {\n      return;\n    }*/\n    timerComponents.push(\n        <>\n            {timeLeft[interval]}\n        </>\n    );\n  })\n  return (\n    <div>\n        <center><h1 class = \"change-font\">Tiempo para el cumpleaños de<span class= \"color-text\"> {props.name}</span></h1></center>\n    <Jumbotron className =\"font\">\n        <Container fluid>\n            <Row>\n                <Col>\n                <center><h1 class= \"big-text\" >{timerComponents.length ? timerComponents:<span>Time's up!</span>}</h1></center>\n                </Col>\n            </Row>\n        </Container>\n        </Jumbotron>\n    </div>\n  )\n    }\nexport default App;\n\n","import Container from 'react-bootstrap/Container'\nimport React, {Component, useEffect, useState } from \"react\";\nimport App from './App'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport Button from 'react-bootstrap/Button'\nimport FormControl from 'react-bootstrap/FormControl'\nimport\"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport './mix-style.css'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nclass Mix extends Component{\n    constructor(props) {\n    super(props);\n        this.state = {\n            inputValue : 'Yollotl',\n            year:'2020-10-21'\n        };\n    }\n\n\n    handleChange = () =>{\n     /* 3. Get Ref Value here (or anywhere in the code!) */\n     this.value =  this.textInput.current.value;   \n        console.log(this.value);\n    }\n     updateInputValue(evt) {\n    this.setState({\n    inputValue: evt.target.value\n        });\n    }\n     updateYear(evt) {\n    this.setState({\n    year: evt.target.value\n        });\n    }\n\n    render(){\n        return(\n            <>\n                <App name = {this.state.inputValue} year = {this.state.year}/>\n                <h2>¿De quien es cumpleaños?</h2>\n                <center><input value={this.state.inputValue} onChange={evt => this.updateInputValue(evt)}/></center>\n                <h2>¿Cuando es el cumpleaños?</h2>\n                <br></br>\n                <h4>Formato (YYYY-MM-DD)</h4>\n                <center><input value={this.state.year} onChange={evt => this.updateYear(evt)}/></center>\n            </>\n        )\n    }\n}\nexport default Mix;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport  Mix from './Mix'\nimport * as serviceWorker from './serviceWorker';\nimport\"../node_modules/bootstrap/dist/css/bootstrap.min.css\";\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\n     /* 1. Initialize Ref */\nReactDOM.render(\n  <React.StrictMode>\n      <Container fluid>\n          <Row>\n              \n          </Row>\n          <Row>\n              <Col>\n          <Mix></Mix>\n                \n              </Col>\n          </Row>\n      </Container>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}